mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
str(df$"Are you on the waitlist?")
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
qplot(colSums(mrLogical))
plotdf <- data.frame(
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
mrOptions
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")
mrOptions
mrOptions <- removeParentheses(mrOptions)
mrOptions
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
#mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
df
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
View(mrLogical)
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), openrefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
#str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), openrefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
#str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
#str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
#con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
require(RCurl)
require(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
#str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
fix(gridLevels)
detach("package:RCurl", unload=TRUE)
library("RCurl", lib.loc="/Users/stump/Library/R/3.0/library")
library(RCurl)
library(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
fix(expandSelections)
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
library(RCurl)
library(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
#str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
library(RCurl)
library(ggplot2)
con <- getURL("https://docs.google.com/spreadsheets/d/19a0O6C14zButypjcnWictvKWeyPjPjQdrps-UXzPDf8/export?format=csv")
df <- read.csv(textConnection(con), stringsAsFactors=FALSE, check.names=FALSE)
#str(df)
removeParentheses <- function(x){
gsub("\\(.*\\)$", "", x)
}
mrOptions <- strsplit("Excel, R, Stata, D3, Gephi, ggplot2, lattice, SQL, git / Github, SPSS, shell (terminal / command line), regular expressions (grep), Rstudio, JSON, Python, Sweave/knitr, Processing (language), C/C++, Leaflet, CartoDB, GeoJSON, node/npm, go language, ruby, LaTeX, Heroku, Make, Pandas, Julia, non-git version control, XML, Web: html css js, vagrant/virtualbox, amazon web services, dropbox, google drive (formerly docs), OpenRefine (formerly Google refine), Pair programming", ", ")[[1]]
mrOptions <- removeParentheses(mrOptions)
expandSelections <- function(selected, options){
selected <- removeParentheses(selected)
sapply(options, grepl, x=selected, fixed=TRUE) # returns a logical if ture
}
#gridLevels <- c("None", "A little", "Confident", "Expert")
makeOrderedFactor <- function(col, levels){
return (factor(col, levels=levels, labels=levels, ordered=TRUE))
}
mrLogical <- t(sapply(df[['Baseline experience']], expandSelections, options=mrOptions))
#plot(colSums(mrLogical))
#barplot(colSums(mrLogical))
#qplot(colSums(mrLogical))
plotdf <- data.frame(
count=colSums(mrLogical),
item=factor(colnames(mrLogical)))
plotdf$item <- with(plotdf, reorder(item, count))
ggplot(plotdf, aes(y=count, x=item)) + geom_bar(stat="identity") + coord_flip()
fix(expandSelections)
View(pos)
devtools::install_github(c("adletaw/captioner/captioner", "hadley/bookdown"))
# installing/loading the latest installr package:
install.packages("installr"); require(installr) #load / install+load installr
updateR()
devtools::install_github(c("adletaw/captioner/captioner", "hadley/bookdown"))
library(dplyr)
library(ggplot2)
library(scales)
library(reshape)
theme_set(theme_bw()) # a theme with a white background
#
# function to compute geometric mean
#
geom.mean <- function(x,dx=0.01) {
10^mean(log10(x+dx))-dx
}
# read user pageview data
users <- read.table(gzfile('users.tsv.gz'), header=T, sep="\t")
# 50/50 train/test split
set.seed(42)
adults <- filter(users, age >= 20 & age <= 60)
num.train <- floor(nrow(adults)*0.5)
train.ndx <- sample(1:nrow(adults), num.train, replace=F)
adults.train <- adults[train.ndx, ]
adults.test <- adults[-train.ndx, ]
fit <- data.frame()
for (k in 1:10) {
#form <- as.formula(sprintf('log10(daily.views+0.01) ~ gender*poly(age,%d)', k))
form <- as.formula(sprintf('daily.views ~ gender*poly(age,%d)', k))
model <- lm(form, data=adults.train)
#fit.train <- cor(10^predict(model, adults.train)-0.1, adults.train$daily.views)
#fit.test <- cor(10^predict(model, adults.test)-0.1, adults.test$daily.views)
fit.train <- cor(predict(model, adults.train), adults.train$daily.views)
fit.test <- cor(predict(model, adults.test), adults.test$daily.views)
#fit.train <- norm(predict(model, adults.train)- adults.train$daily.views,type="2")
#fit.test <- norm(predict(model, adults.test)- adults.test$daily.views,type="2")
fit <- rbind(fit, data.frame(k=k, train=fit.train, test=fit.test))
}
# plot train/test loss
plot.data <- melt(fit, id="k")
ggplot(data=plot.data, aes(x=k, y=value)) +
geom_line(aes(linetype=variable)) +
xlab('Degree') + ylab('R-squared') +
theme(legend.title=element_blank(), legend.position=c(0.9,0.8))
ggsave(filename='figures/cross_validation_polyfit_age.pdf', width=8, height=4)
# fit model at best value of k
best.test <- fit %>% filter(test == max(test))
best.test
form <- as.formula(sprintf('daily.views ~ gender*poly(age,%d)', best.test$k))
model <- lm(form, data=adults.train)
# compute mean / median / geometric mean daily pageviews by age / gender
views.by.age.gender <- filter(users, age <= 90) %>%
group_by(age, gender) %>%
summarize(mean.daily.views     =mean(     daily.views),
median.daily.views   =median(   daily.views),
geom.mean.daily.views=geom.mean(daily.views),
num.users            =length(   daily.views)
)
# create synthetic examples for both genders, all ages
# add predicted page views to synthetic examples
model.adults <- expand.grid(age=20:60, gender=factor(c('Male','Female')))
model.adults$daily.views <- predict(model, model.adults)
# plot modeled pageviews vs. actual
plot.data <- merge(model.adults, views.by.age.gender, by=c("age", "gender"))
ggplot(data=plot.data, aes(x=age, y=daily.views, colour=gender)) +
geom_line(aes(linetype=gender)) +
geom_point(aes(x=age, y=mean.daily.views, shape=gender)) +
xlab('Age') + ylab('Daily pageviews') +
theme(legend.title=element_blank(), legend.position=c(0.9,0.85))
ggsave(filename='figures/mean_daily_pageviews_by_age_and_gender.pdf', width=8, height=4)
setwd("~/github/msd2015/lectures/lecture_4")
library(dplyr)
library(ggplot2)
library(scales)
library(reshape)
theme_set(theme_bw()) # a theme with a white background
#
# function to compute geometric mean
#
geom.mean <- function(x,dx=0.01) {
10^mean(log10(x+dx))-dx
}
# read user pageview data
users <- read.table(gzfile('users.tsv.gz'), header=T, sep="\t")
# 50/50 train/test split
set.seed(42)
adults <- filter(users, age >= 20 & age <= 60)
num.train <- floor(nrow(adults)*0.5)
train.ndx <- sample(1:nrow(adults), num.train, replace=F)
adults.train <- adults[train.ndx, ]
adults.test <- adults[-train.ndx, ]
fit <- data.frame()
for (k in 1:10) {
#form <- as.formula(sprintf('log10(daily.views+0.01) ~ gender*poly(age,%d)', k))
form <- as.formula(sprintf('daily.views ~ gender*poly(age,%d)', k))
model <- lm(form, data=adults.train)
#fit.train <- cor(10^predict(model, adults.train)-0.1, adults.train$daily.views)
#fit.test <- cor(10^predict(model, adults.test)-0.1, adults.test$daily.views)
fit.train <- cor(predict(model, adults.train), adults.train$daily.views)
fit.test <- cor(predict(model, adults.test), adults.test$daily.views)
#fit.train <- norm(predict(model, adults.train)- adults.train$daily.views,type="2")
#fit.test <- norm(predict(model, adults.test)- adults.test$daily.views,type="2")
fit <- rbind(fit, data.frame(k=k, train=fit.train, test=fit.test))
}
# plot train/test loss
plot.data <- melt(fit, id="k")
ggplot(data=plot.data, aes(x=k, y=value)) +
geom_line(aes(linetype=variable)) +
xlab('Degree') + ylab('R-squared') +
theme(legend.title=element_blank(), legend.position=c(0.9,0.8))
ggsave(filename='figures/cross_validation_polyfit_age.pdf', width=8, height=4)
# fit model at best value of k
best.test <- fit %>% filter(test == max(test))
best.test
form <- as.formula(sprintf('daily.views ~ gender*poly(age,%d)', best.test$k))
model <- lm(form, data=adults.train)
# compute mean / median / geometric mean daily pageviews by age / gender
views.by.age.gender <- filter(users, age <= 90) %>%
group_by(age, gender) %>%
summarize(mean.daily.views     =mean(     daily.views),
median.daily.views   =median(   daily.views),
geom.mean.daily.views=geom.mean(daily.views),
num.users            =length(   daily.views)
)
# create synthetic examples for both genders, all ages
# add predicted page views to synthetic examples
model.adults <- expand.grid(age=20:60, gender=factor(c('Male','Female')))
model.adults$daily.views <- predict(model, model.adults)
# plot modeled pageviews vs. actual
plot.data <- merge(model.adults, views.by.age.gender, by=c("age", "gender"))
ggplot(data=plot.data, aes(x=age, y=daily.views, colour=gender)) +
geom_line(aes(linetype=gender)) +
geom_point(aes(x=age, y=mean.daily.views, shape=gender)) +
xlab('Age') + ylab('Daily pageviews') +
theme(legend.title=element_blank(), legend.position=c(0.9,0.85))
ggsave(filename='figures/mean_daily_pageviews_by_age_and_gender.pdf', width=8, height=4)
views.by.age.gender <- filter(users, age <= 90) %>%
group_by(age, gender) %>%
summarize(mean.daily.views     =mean(     daily.views),
median.daily.views   =median(   daily.views),
geom.mean.daily.views=geom.mean(daily.views),
num.users            =length(   daily.views)
)
views.by.age.gender
views.by.age.gender <- filter(users, age <= 90) %>%
group_by(age, gender) %>%
summarize(mean.daily.views     =mean(     daily.views),
median.daily.views   =median(   daily.views),
geom.mean.daily.views=geom.mean(daily.views),
num.users            =length(   daily.views)
)
views.by.age.gender
View(adults.test)
model.adults <- expand.grid(age=20:60, gender=factor(c('Male','Female')))
model.adults
predict(model, model.adults)
model.adults$daily.views <- predict(model, model.adults)
plot.data <- merge(model.adults, views.by.age.gender, by=c("age", "gender"))
ggplot(data=plot.data, aes(x=age, y=daily.views, colour=gender)) +
geom_line(aes(linetype=gender)) +
geom_point(aes(x=age, y=mean.daily.views, shape=gender)) +
xlab('Age') + ylab('Daily pageviews') +
theme(legend.title=element_blank(), legend.position=c(0.9,0.85))
filter(users, age <= 90) %>%
group_by(age, gender) %>%
summarize(mean.daily.views     =mean(     daily.views),
median.daily.views   =median(   daily.views),
geom.mean.daily.views=geom.mean(daily.views),
num.users            =length(   daily.views)
)
model <- lm(form, data=adults.train)
model
